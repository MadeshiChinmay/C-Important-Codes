#include<bits/stdc++.h>

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

//#define int long long
#define pb push_back
#define pii pair<int,int>
#define fr(i,n) for(int i=0;i<n;i++)
#define F first
#define S second
#define nl '\n'
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int N = (int32_t)1e6+1;
int t[4*N];
int freq[N];

void build(int a[], int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = a[tl];
    } else {
        int tm = (tl + tr) / 2;
        build(a, v*2, tl, tm);
        build(a, v*2+1, tm+1, tr);
        t[v] = t[v*2] + t[v*2+1];
    }
}

int sum(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return 0;
    if (l == tl && r == tr) {
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return sum(v*2, tl, tm, l, min(r, tm))
           + sum(v*2+1, tm+1, tr, max(l, tm+1), r);
}

void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) {
        t[v] = new_val;
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = t[v*2] + t[v*2+1];
    }
}
int get_first(int v, int lv, int rv, int l, int r, int x) {
    if(lv > r || rv < l) return -1;
    if(l <= lv && rv <= r) {
        //if(t[v] < x) return -1;
        while(lv != rv) {
            int mid = lv + (rv-lv)/2;
            if(t[2*v] >= x) {
                v = 2*v;
                rv = mid;
            } else {
                v = 2*v+1;
                lv = mid+1;
            }
        }
        return lv;
    }

    int mid = lv + (rv-lv)/2;
    int rs = get_first(2*v, lv, mid, l, r, x);
    if(rs != -1) return rs;
    return get_first(2*v+1, mid+1, rv, l ,r, x);
}
int foo(int k, int index, int si, int ei)
{

    if(si == ei) return si;

    int mid = (si + ei) / 2;


    int a = t[2 * index];

    if(a >= k) return foo(k, 2*index, si,mid);

    else return foo(k - a, 2*index + 1, mid+1,ei);
}
int32_t main()
{   fastio;
    int n , q;
    cin>>n>>q;

    int arr[n];
    memset(freq , 0 , sizeof(freq));

    for(int i=0; i<n; i++)
    {
        cin>>arr[i];
        freq[arr[i]]++;
    }

    int query[q];
    build(freq , 1 , 1 , N);


    for(int i=0; i<q; i++)
    {
        cin>>query[i];

        if(query[i]>0)
        {
            int val = query[i];
            freq[val]++;
            update(1 , 1 , N , val , freq[val]);
        }
        else
        {
            int k = abs(query[i]);
            //int ans = get_first(1 , 1 , N , 1 , N , k);
            int ans = foo(k , 1 , 1 , N);
            //cout<<ans<<endl;
            freq[ans]--;
            update(1 , 1 , N , ans , freq[ans]);
        }
    }
    for(int i=1; i <=n; i++)
    {
        if(freq[i]>0) {
            cout<<i<<endl;
            return 0;
        }
    }
    //cout<<endl;
    cout<<0<<endl;


}
